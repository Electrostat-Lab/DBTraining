{
  "streams": [
    {
      "preface xml": "Create a xml layout file for training with the following code : \n",
      "code xml": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".mainScreens.ioStreamScreen.runIOStreamInterface.runIOStreamInterface\"\n    android:orientation=\"vertical\"\n    \n    >\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:gravity=\"center\"\n        android:padding=\"20dp\"\n        >\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        >\n    <TextView\n        android:id=\"@+id/ID\"\n        android:text=\"Personal ID\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"20dp\"\n        android:padding=\"10dp\"\n        />\n    <EditText\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        />\n    </LinearLayout>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        android:padding=\"10dp\">\n        <TextView\n            android:id=\"@+id/name\"\n            android:text=\"Name\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"20dp\"\n            />\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            />\n    </LinearLayout>\n    <Button\n        android:id=\"@+id/submit\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\"\n        android:text=\"submit\"\n        />\n    <Button\n        android:id=\"@+id/getData\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\"\n        android:text=\"get Data\"\n        />\n    \n    <TextView\n        android:id=\"@+id/dataFetched\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"press getData to fetch data from file system\"\n        />\n</LinearLayout>\n</LinearLayout>"
    }
    ,
    {
    "preface java": "Create a class for READ/WRITE Data using java.io Package :",
    "code java": "package com.scrappers.dbtraining.mainScreens.ioStreamScreen.runIOStreamInterface.FileIO;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\n/**\n * @author twisted Metal AKA Pavly G.\n */\npublic class FileIO {\n\n    private final AppCompatActivity context;\n    private String fileName;\n    private String dir;\n\n    /**\n     * Read & Write data using Java File IO\n     * @param context activity context\n     * @param dir directory to which data is saved to & read from\n     * @param fileName the name of the terminal file in that location\n     */\n    public FileIO(AppCompatActivity context,String dir,String fileName){\n        this.context=context;\n        this.dir=dir;\n        this.fileName=fileName;\n        this.mkDirs();\n    }\n\n    /**\n     * mkdirs(); create a new Dir if it doesn't exist\n     */\n    private void mkDirs(){\n        System.out.println(new File(context.getFilesDir()+\"/\"+dir).mkdirs());\n    }\n\n    /**\n     * writes data to that file\n     * @param data data to write in String\n     */\n    public void writeData(String data){\n        try(FileOutputStream fos=new FileOutputStream(new File(context.getFilesDir()+\"/\"+dir,fileName))){\n            fos.write(data.getBytes());\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Reads data\n     * @return data in String\n     */\n    public String readData(){\n        StringBuilder resultString= new StringBuilder();\n        try(FileInputStream fis=new FileInputStream(new File(context.getFilesDir()+\"/\"+dir,fileName))){\n            int size=fis.available();\n            for(int charPosition=0; charPosition<size; charPosition++){\n                resultString.append((char) fis.read());\n            }\n            return resultString.toString();\n        }catch (IOException e){\n            e.printStackTrace();\n            return \"\";\n        }\n    }\n}\n",
    "preface java activity": "Create a new Java Activity Class & call that xml layout design in setContentView() method\n,then create Instance from the class LocalDatabase & try READ/WRITE data\n",
    "code java activity": "package com.scrappers.dbtraining.mainScreens.ioStreamScreen.runIOStreamInterface;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\nimport com.scrappers.dbtraining.R;\nimport com.scrappers.dbtraining.mainScreens.ioStreamScreen.runIOStreamInterface.FileIO.FileIO;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class runIOStreamInterface extends AppCompatActivity {\n\n    private FileIO fileIO;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_run_i_o_stream_interface);\n        /*\n         * define an Instance of your class\n         */\n        fileIO=new FileIO(this,\"/user\",\"user.txt\");\n\n        Button submit=findViewById(R.id.submit);\n        submit.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                /*\n                 * save data\n                 */\n                fileIO.writeData(((EditText)findViewById(R.id.ID)).getText().toString()+\"\\n\" +\n                        ((EditText)findViewById(R.id.name)).getText().toString()+\"\\n\");\n            }\n        });\n\n        Button getData=findViewById(R.id.getData);\n        getData.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                /*\n                 * getData\n                 */\n                ((TextView)findViewById(R.id.dataFetched)).setText(fileIO.readData());\n            }\n        });\n\n    }\n}"
    }
  ]
  ,
  "buffers": [
    {
      "preface xml": "Create a xml layout file w/ the following code(you can find codes for the drawable resources & assets on github from Nav View) : \n",
      "code xml": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".mainScreens.ioStreamScreen.runIOStreamInterface.runIOStreamInterface\"\n    android:orientation=\"vertical\"\n    android:background=\"@drawable/run_background\"\n\n    >\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:gravity=\"center\"\n        android:padding=\"20dp\"\n        >\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            android:background=\"@drawable/item_background\"\n            android:padding=\"20dp\"\n            >\n            <TextView\n                android:text=\"Personal ID\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:textSize=\"20dp\"\n                android:padding=\"10dp\"\n                />\n            <EditText\n                android:id=\"@+id/ID\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                />\n        </LinearLayout>\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            android:padding=\"20dp\"\n            android:background=\"@drawable/item_background\">\n            <TextView\n                android:text=\"Name\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:textSize=\"20dp\"\n                android:padding=\"10dp\"\n                />\n            <EditText\n                android:id=\"@+id/name\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                />\n        </LinearLayout>\n        <Button\n            android:id=\"@+id/submit\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:text=\"submit\"\n            android:textColor=\"@color/white\"\n            android:layout_marginTop=\"10dp\"\n            android:padding=\"10dp\"\n            android:background=\"@drawable/rounded_btn\"\n            android:backgroundTint=\"@color/greenGold\"\n            />\n        <Button\n            android:id=\"@+id/getData\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:text=\"get Data\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"10dp\"\n            android:background=\"@drawable/rounded_btn\"\n            android:textColor=\"@color/white\"\n            />\n\n        <TextView\n            android:id=\"@+id/dataFetched\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:layout_marginTop=\"20dp\"\n            android:text=\"press getData to fetch data from file system\"\n            android:textColor=\"@color/white\"\n            />\n        <TextView\n            android:id=\"@+id/goCheck\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:layout_marginTop=\"20dp\"\n            android:textColor=\"@color/crimsonRed\"\n            />\n    </LinearLayout>\n</LinearLayout>"
    }
    ,
    {
      "preface java": "Create a READ/WRITE class using BufferedReader & BufferedWriter\n\nNB:\n1-Environment.getExternalStorageDirectory() returns the root external storage directory in a new File()\n\n2-Before starting data Read/Write to external storage make sure you have given the app the WRITE_EXTERNAL_STORAGE permission through Activity.requestPermission()\n",
      "code java": "package com.scrappers.dbtraining.mainScreens.ioBufferScreen.runIOBufferInterface.Buffers;\n\nimport android.Manifest;\nimport android.os.Environment;\nimport android.view.View;\n\nimport com.google.android.material.snackbar.Snackbar;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.app.ActivityCompat;\n\n/**\n * @author PAVLY G.\n * @see{https://github.com/Scrappers-glitch/DBTraining/tree/master} \n */\npublic class BuffersIO {\n    private static final int WRITE_EXTERNAL_PERMISSION = 22;\n    private final AppCompatActivity context;\n    private String dir;\n    private String fileName;\n\n    /**\n     * Creates a data writer/Reader instance to the ExternalStorage based on a file System\n     * @param context the activity holder context\n     * @param dir the directory to write in\n     * @param fileName the terminal fileName\n     */\n    public BuffersIO(AppCompatActivity context, String dir, String fileName){\n        this.context=context;\n        this.setDir(Environment.getExternalStorageDirectory()+dir);\n        this.setFileName(fileName);\n        this.getPermissions();\n    }\n\n    /**\n     * make the directory\n     * @return true if the directory isMade successfully otherwise false\n     */\n    public boolean mkDirs(){\n        return new File(dir).mkdirs();\n    }\n    /**\n     * set the directory\n     * @param dir directory to use\n     */\n    public void setDir(String dir) {\n        this.dir = dir;\n    }\n\n    public String getDir() {\n        return dir;\n    }\n\n    public String getFileName() {\n        return fileName;\n    }\n\n    /**\n     * sets the terminal fileName\n     * @param fileName file\n     */\n    public void setFileName(String fileName) {\n        this.fileName = fileName;\n    }\n\n    /**\n     * get WRITE_EXTERNAL_STORAGE permission\n     */\n    private void getPermissions(){\n        ActivityCompat.requestPermissions(context,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},WRITE_EXTERNAL_PERMISSION);\n    }\n\n    /**\n     * get permission ID\n     * @return int\n     */\n    public static int getWriteExternalPermissionID() {\n        return WRITE_EXTERNAL_PERMISSION;\n    }\n\n    /**\n     * Writes data to the specified dir\n     * @param data data to write in String\n     */\n    public void writeData(String data, View view){\n        try(BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(new File(dir,fileName)))){\n            bufferedWriter.write(data);\n            Snackbar.make(view,\"Data Write Established\",Snackbar.LENGTH_LONG).show();\n        }catch (IOException e){\n            System.err.println(e.getMessage());\n            Snackbar.make(view,\"Data Write Failed\",Snackbar.LENGTH_LONG).show();\n        }\n    }\n\n    /**\n     * Read the data => pass it into a StringBuilder & show it up as a String\n     * @return data in string\n     */\n    public String readData(View view){\n        StringBuilder dataRead=new StringBuilder();\n        try(BufferedReader bufferedReader=new BufferedReader(new FileReader(new File(dir,fileName)))){\n            while (bufferedReader.ready()){\n                dataRead.append(bufferedReader.readLine()).append(System.lineSeparator());\n            }\n            Snackbar.make(view,\"Data Read Established\",Snackbar.LENGTH_LONG).show();\n            return String.valueOf(dataRead);\n        }catch (IOException e){\n            e.printStackTrace();\n            Snackbar.make(view,\"Data Read Failed\",Snackbar.LENGTH_LONG).show();\n            return \"\";\n        }\n    }\n}\n",
      "preface java activity": "Create a new Activity\nCall its xml\nMake an instance of BuffersIO\n\nNB:\n 1-When an instance of BuffersIO is made , your app asks the user for Storage Permissions\n\nOverride the method void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) & check for the request\nstart Data Read & Write",
      "code java activity": "package com.scrappers.dbtraining.mainScreens.ioBufferScreen.runIOBufferInterface;\n\nimport android.annotation.SuppressLint;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\nimport com.google.android.material.snackbar.Snackbar;\nimport com.scrappers.dbtraining.R;\nimport com.scrappers.dbtraining.mainScreens.ioBufferScreen.runIOBufferInterface.Buffers.BuffersIO;\n\nimport java.io.File;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class runIOBufferInterface extends AppCompatActivity {\n    private BuffersIO buffersIO;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_run_i_o_buffer_interface);\n        /*\n         * Define an Instance\n         */\n        buffersIO=new BuffersIO(runIOBufferInterface.this,\"/DB CodeCamp/\",\"codeCamp.dll\");\n        findViewById(R.id.submit).setOnClickListener(new View.OnClickListener() {\n            @SuppressLint(\"SetTextI18n\")\n            @Override\n            public void onClick(View view) {\n               buffersIO.writeData(((EditText) findViewById(R.id.ID)).getText() + System.lineSeparator()+\n                                    ((EditText) findViewById(R.id.name)).getText().toString() + System.lineSeparator(),view);\n                ((TextView)findViewById(R.id.goCheck)).setText(\"GO Check \" + new File(buffersIO.getDir(), buffersIO.getFileName()).toString());\n            }\n        });\n        findViewById(R.id.getData).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ((TextView)findViewById(R.id.dataFetched)).setText(buffersIO.readData(v));\n            }\n        });\n\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if(requestCode== BuffersIO.getWriteExternalPermissionID()){\n            System.out.println(buffersIO.mkDirs());\n        }\n    }\n}"
    }
  ]
}